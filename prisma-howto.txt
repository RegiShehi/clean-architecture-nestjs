// Generic repository
import { Prisma, PrismaClient, PrismaPromise } from '@prisma/client';

export abstract class BaseRepository<T extends Prisma.ModelDelegate<any>> {
  protected prisma: PrismaClient;
  protected abstract modelName: string;

  constructor() {
    this.prisma = new PrismaClient();
  }

  async findMany(): Promise<T[]> {
    return this.prisma[this.modelName].findMany();
  }

  async findOne(id: number): Promise<T | null> {
    return this.prisma[this.modelName].findUnique({ where: { id } });
  }

  async create(data: Prisma.CreateArgs<T>['data']): Promise<T> {
    return this.prisma[this.modelName].create({ data });
  }

  async update(
    id: number,
    data: Prisma.UpdateArgs<T>['data'],
  ): Promise<T | null> {
    return this.prisma[this.modelName].update({ where: { id }, data });
  }

  async delete(id: number): Promise<T | null> {
    return this.prisma[this.modelName].delete({ where: { id } });
  }
}


//User repository
import { User, Prisma } from '@prisma/client';
import { BaseRepository } from './base.repository';

export class UserRepository extends BaseRepository<User> {
  protected modelName = 'user';

  async findByName(name: string): Promise<User | null> {
    return this.prisma.user.findUnique({ where: { name } });
  }

  async findByEmail(email: string): Promise<User | null> {
    return this.prisma.user.findUnique({ where: { email } });
  }

  async findManyByEmails(emails: string[]): Promise<User[]> {
    return this.prisma.user.findMany({ where: { email: { in: emails } } });
  }

  async findByQuery(query: Prisma.UserWhereInput): Promise<User[]> {
    return this.prisma.user.findMany({ where: query });
  }
}


//Prisma dataservices
import { Injectable } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';
import { IBookRepository } from 'src/domain/abstracts/repositories/book-repository.abstract';
import { IUserRepository } from 'src/domain/abstracts/repositories/user-repository.abstract';
import { IDataServices } from 'src/domain/abstracts/data-services.abstract';
import { IGenericRepository } from 'src/domain/abstracts/repositories/generic-repository.abstract';
import { Author, Book, User } from '@prisma/client';
import { PrismaGenericRepository } from '../../../repositories/prisma-generic.repository';
import { PrismaBookRepository } from 'src/infrastructure/repositories/prisma-book.repository';
import { PrismaUserRepository } from 'src/infrastructure/repositories/prisma-user.repository';

@Injectable()
export class PrismaDataServices implements IDataServices {
  authors: IGenericRepository<Author>;
  books: IBookRepository;
  users: IUserRepository;

  constructor(private prisma: PrismaClient) {
    this.authors = new PrismaGenericRepository<Author>(prisma.author);
    this.books = new PrismaBookRepository(prisma.book);
    this.users = new PrismaUserRepository(prisma.user);
  }
}


//Prisma dataservices module
import { Module } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';
import { IDataServices } from 'src/domain/abstracts/data-services.abstract';
import { PrismaDataServices } from './services/prisma-data-services.service';

@Module({
  providers: [
    {
      provide: PrismaClient,
      useValue: new PrismaClient(),
    },
    {
      provide: IDataServices,
      useClass: PrismaDataServices,
    },
  ],
})
export class AppModule {}


//Sample controller
import { Controller, Get } from '@nestjs/common';
import { IDataServices } from 'src/domain/abstracts/data-services.abstract';

@Controller('books')
export class BooksController {
  constructor(private dataServices: IDataServices) {}

  @Get()
  async findAll() {
    return this.dataServices.books.findAll();
  }
}

